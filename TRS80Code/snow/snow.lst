    = 3C00      00001 VIDEO    EQU    3C00H   ; location of video RAM in memory
                00002          ORG    5200H   ; load this program into 0x5200 memory location (above BASIC and DOS)
                00003 
                00004 ; *****************************************************************
                00005 ; * SNOWFALL - TRS-80                                             *
                00006 ; * This program creates a snowfall scene.  It creates 128        *
                00007 ; * snowflakes.  The X and Y coordinates are stored in two        *
                00008 ; * parallel arrays (XS ans YS).  There are four "planes" of      *
                00009 ; * of flakes -- four speeds, stored in two parallel arrays       *
                00010 ; * called XINCS and YINCS.                                       *
                00011 ; *                                                               *
                00012 ; * FLOW:                                                         *
                00013 ; *      10) Clear the screen                                     *  
                00014 ; *      20) Set up random number seed value                      *
                00015 ; *      30) Load up XS array with random values 0 - 127          *
                00016 ; *      40) Load up YS array with random values 0 - 47           *
                00017 ; *      50) Load up XINCS array with random values from 0 - 3    *
                00018 ; *      60) Load up YINCS array with random values from 1 - 3    *
                00019 ; *      70) Main loop                                            *
                00020 ; *          A.  Clear any pixels from last iterations            *
                00021 ; *          B.  Compute (XS[B],YS[B]) from XINCS[B] and YINCS[B] *
                00022 ; *          C.  Draw pixel
                00023 ; *****************************************************************
                00024 ;
                00025 ; ----------------------------------------
                00026 ; |  Clear screen                        |
                00027 ; ----------------------------------------  
5200  21003C    00028 ENTRY   LD     HL,VIDEO       ; put VIDEO RAM address into HL register
5203  11013C    00029         LD     DE,VIDEO+1     ; put VIDEO RAM address +1 into DE 
5206  010004    00030         LD     BC,400H        ; put counter into BC 
5209  3680      00031         LD     (HL),10000000b ; put ascii 128 into video location
520B  EDB0      00032         LDIR                  ; run fast memory copy
                00033 ;
                00034 ; ----------------------------------------------------------------
                00035 ; |  Setup random number seed                                    |
                00036 ; ----------------------------------------------------------------
520D  CD4A54    00037         CALL   RANDSD         ; set up the random number seed
                00038 
                00039 ;
                00040 ; ----------------------------------------------------------------
                00041 ; |  Load up XS array with random values from 0 - 127            |
                00042 ; ----------------------------------------------------------------
5210  0680      00043         LD     B,128          ; do this loop 128 times
5212  DD216954  00044         LD     IX, XS         ; store the address of XS in IX
                00045 L1:
5216  CD5754    00046         CALL   RANDR          ; get random number for A
5219  CB2F      00047         SRA    A              ; divide A by 2 (0 - 127)
521B  E67F      00048         AND    01111111b
521D  DD7700    00049         LD     (IX),A         ; store random number in address pointed by IX
5220  DD23      00050         INC    IX             ; add 1 to the address
5222  10F2      00051         DJNZ   L1             ; decrement B, then loop back to L1 until B is zero
                00052 
                00053 ;
                00054 ; ----------------------------------------------------------------
                00055 ; |  Load up YS array with random values from 0 - 47             |
                00056 ; ----------------------------------------------------------------
5224  0680      00057         LD     B,128
5226  DD21E954  00058         LD     IX, YS
                00059 L2:
522A  CD5754    00060         CALL   RANDR          ; get random number for A
522D  CB2F      00061         SRA    A              ; >> 1 (/2) (256 = 128)
522F  E67F      00062         AND    01111111b      ; make sure to get rid of left most digit
5231  CB2F      00063         SRA    A              ; >> 1 (/2) (128 = 64)
5233  CB2F      00064         SRA    A              ; >> 1 (/2) (64  = 32)
5235  4F        00065         LD     C,A            ; put this in C temporarily
5236  CD5754    00066         CALL   RANDR          ; get another random number
5239  CB2F      00067         SRA    A              ; >> 1 (/2) (256 = 128)
523B  E67F      00068         AND    01111111b      ; make sure to get rid of left most digit
523D  CB2F      00069         SRA    A              ; >> 1 (/2) (128 = 64)
523F  CB2F      00070         SRA    A              ; >> 1 (/2) (64 = 32)
5241  CB2F      00071         SRA    A              ; >> 1 (/2) (32 = 16)
5243  81        00072         ADD    A,C            ; now A should contain a number from 0 - 47 (since a random number < 32 + a random number < 16 must be a random number < 48)
5244  DD7700    00073         LD     (IX),A         ; put 0 - 47 value to memory pointed to by IX
5247  DD23      00074         INC    IX             ; add 1 to offset address to do next number (the YS memory array location)
5249  10DF      00075         DJNZ   L2             ; subtract 1 from B and jump back to L2 if B > 0
                00076 
                00077 ;
                00078 ; ----------------------------------------------------------------
                00079 ; |  Load up XINCS array with random values from 0 - 3           |
                00080 ; ----------------------------------------------------------------
524B  0604      00081         LD     B,4            ; set B to 4
524D  DD216955  00082         LD     IX, XINCS      ; set IX to the memory location of XINCS[0]
                00083 L3:
5251  CD5754    00084         CALL   RANDR          ; get random numer for A
5254  0E03      00085         LD     C,3            ; set C to 3
5256  A1        00086         AND    C              ; bitwise AND random value with 3 (meaning random number 0 - 3)
5257  DD7700    00087         LD     (IX),A         ; put 1 - 3 value to memory pointed to by IX (XINCS[B])
525A  DD23      00088         INC    IX             ; increment IX
525C  10F3      00089         DJNZ   L3             ; subtract 1 from B and jump back to L3 if B > 0
                00090 
                00091 ;
                00092 ; ----------------------------------------------------------------
                00093 ; |  Load up YINCS array with random values from 1 - 3           |
                00094 ; ----------------------------------------------------------------
525E  0604      00095         LD     B,4            ; set B to 4
5260  DD216D55  00096         LD     IX, YINCS      ; set IX to memory location of YINCS[0]
                00097 L4:
5264  CD5754    00098         CALL   RANDR          ; get random number for A
5267  0E02      00099         LD     C,2            ; set C to 2
5269  A1        00100         AND    C              ; AND A with 2, giving a random number from 0 - 2 in A
526A  3C        00101         INC    A              ; add 1 to A
526B  DD7700    00102         LD     (IX),A         ; put 1 - 3 value to memory pointed to by IX (YINCS[B])
526E  DD23      00103         INC    IX             ; increment IX
5270  10F2      00104         DJNZ   L4             ; subtract 1 from B and jump back to L4 if B > 0
                00105 
                00106 
                00107 ;
                00108 ; ----------------------------------------------------------------
                00109 ; |  Main loop                                                   |
                00110 ; ----------------------------------------------------------------
                00111 MAIN    
                00112 
                00113 ;
                00114 ; ----------------------------------------------------------------
                00115 ; |  Iterate over current positions and "unset" them so          |
                00116 ; |  that they disappear.                                        |
                00117 ; ----------------------------------------------------------------
5272  0680      00118         LD     B,128          ; Loop over all 128 snowflake positions
                00119 L5:            
5274  DD216954  00120         LD     IX,XS          ; put the address of XS array into IX
5278  1600      00121         LD     D,0            ; D = 0
527A  58        00122         LD     E,B            ; E = B (put loop counter into a 16 bit register)
527B  DD19      00123         ADD    IX,DE          ; DE to IX, making IX point to an array instance
527D  DD4E00    00124         LD     C,(IX)         ; C now contains the X position for a flake
                00125 
5280  DD21E954  00126         LD     IX,YS          ; put the address of YS array into IX
5284  1600      00127         LD     D,0            ; D = 0
5286  58        00128         LD     E,B            ; E = B (put loop counter into a 16 bit register)
5287  DD19      00129         ADD    IX,DE          ; DE to IX, making IX point to an array instance
5289  DD5600    00130         LD     D,(IX)         ; D now contains the Y position for a flake
528C  59        00131         LD     E,C            ; move C (current X position) to E
528D  C5        00132         PUSH   BC             ; push BC onto the stack so we can loop inside UNSETGR
528E  CD0D54    00133         CALL   UNSETGR        ; call routine to unset (black out) a pixel
5291  C1        00134         POP    BC             ; pop BC back from the stack
                00135 
                00136 ;
                00137 ; ----------------------------------------------------------------
                00138 ; |  Put current main loop iterator into A register              |
                00139 ; |  Jump to specific locations based on where we are in the     |
                00140 ; |  main loop (this is how we form the 4 planes of flakes       |
                00141 ; ----------------------------------------------------------------
5292  78        00142         LD     A,B
5293  FE20      00143         CP     32             ; B < 32?
5295  DA9853    00144         JP     C,LS32         ; yes, plane 4
5298  FE40      00145         CP     64             ; B < 64?
529A  DA4453    00146         JP     C,LS64         ; yes, plane 3
529D  FE60      00147         CP     96             ; B < 96?
529F  DAF352    00148         JP     C,LS96         ; yes, plane 2
                00149                               
                00150 LS128:                        ;      plane 1
52A2  DD216955  00151         LD     IX, XINCS      ; Load address of XINCS into IX
52A6  1600      00152         LD     D,0            ; D = 0
52A8  1E00      00153         LD     E,0            ; E = 0
52AA  DD19      00154         ADD    IX, DE         ; IX now contains address of XINCS[0]
52AC  FD216954  00155         LD     IY, XS         ; Load XS array address into IY
52B0  1600      00156         LD     D,0            ; D = 0
52B2  58        00157         LD     E,B            ; E = main loop counter (flake number)
52B3  FD19      00158         ADD    IY, DE         ; IY now contains address of XS[B]
52B5  DD7E00    00159         LD     A,(IX)         ; Load XINCS[0] into A
52B8  FD4E00    00160         LD     C,(IY)         ; Load XS[B] into C
52BB  81        00161         ADD    A,C            ; A now contains value we want (XINCS[0]), add it to XS[B]
52BC  FE80      00162         CP     128            ; Is flake X position > 128 now?
52BE  D2C452    00163         JP     NC,TOBIG1      ; Yes, go do something about it
52C1  C3C652    00164         JP     OK1            ; Nope, it's fine, jump over this stuff 
52C4  D680      00165 TOBIG1: SUB    128            ; Since it was too big
52C6  FD7700    00166 OK1:    LD     (IY),A         ; Put newly computed XS[B] back into memory
                00167 
52C9  DD216D55  00168         LD     IX, YINCS      ; Load address of YINCS into IX
52CD  1600      00169         LD     D,0            ; D = 0
52CF  1E00      00170         LD     E,0            ; E = 0
52D1  DD19      00171         ADD    IX, DE         ; IX now contains address of YINCS[0]
52D3  FD21E954  00172         LD     IY, YS         ; Load YS array address into IY
52D7  1600      00173         LD     D,0            ; D = 0
52D9  58        00174         LD     E,B            ; E = main loop counter (flake number)
52DA  FD19      00175         ADD    IY, DE         ; IY now contains address of YS[B]
52DC  DD7E00    00176         LD     A,(IX)         ; Load YINCS[0] into A
52DF  FD4E00    00177         LD     C,(IY)         ; Load YS[B] into C
52E2  81        00178         ADD    A,C            ; A now contains value we want (YINCS[0]), add it to YS[B]
52E3  FE30      00179         CP     48             ; Is flake X position > 48 now?
52E5  D2EB52    00180         JP     NC,TOBIG2      ; Yes, go do something about it
52E8  C3ED52    00181         JP     OK2            ; Nope, it's fine, jump over this stuff 
52EB  D630      00182 TOBIG2: SUB    48             ; Since it was too big
52ED  FD7700    00183 OK2:    LD     (IY),A         ; Put newly computed YS[B] back into memory
52F0  C3E653    00184         JP     JOIN           ; Okay, we've set the XS[B] and YS[B] to their new values
                00185 
                00186                               ; this block is the same as the above, just plane 2 (DE set to 1)
52F3  DD216955  00187 LS96:   LD     IX, XINCS
52F7  1600      00188         LD     D,0
52F9  1E01      00189         LD     E,1
52FB  DD19      00190         ADD    IX, DE  
52FD  FD216954  00191         LD     IY, XS
5301  1600      00192         LD     D,0
5303  58        00193         LD     E,B
5304  FD19      00194         ADD    IY, DE   
5306  DD7E00    00195         LD     A,(IX)
5309  FD4E00    00196         LD     C,(IY)
530C  81        00197         ADD    A,C    
530D  FE80      00198         CP     128
530F  D21553    00199         JP     NC,TOBIG3
5312  C31753    00200         JP     OK3
5315  D680      00201 TOBIG3: SUB    128 
5317  FD7700    00202 OK3:    LD     (IY),A
                00203 
531A  DD216D55  00204         LD     IX, YINCS
531E  1600      00205         LD     D,0
5320  1E01      00206         LD     E,1
5322  DD19      00207         ADD    IX, DE   
5324  FD21E954  00208         LD     IY, YS
5328  1600      00209         LD     D,0
532A  58        00210         LD     E,B
532B  FD19      00211         ADD    IY, DE 
532D  DD7E00    00212         LD     A,(IX)
5330  FD4E00    00213         LD     C,(IY)
5333  81        00214         ADD    A,C  
5334  FE30      00215         CP     48
5336  D23C53    00216         JP     NC,TOBIG4
5339  C33E53    00217         JP     OK4
533C  D630      00218 TOBIG4: SUB    48 
533E  FD7700    00219 OK4:    LD     (IY),A                      
5341  C3E653    00220         JP     JOIN
                00221 
                00222                               ; this block is the same as the above, just plane 3 (DE set to 2)
5344  DD216955  00223 LS64:   LD     IX, XINCS
5348  1600      00224         LD     D,0
534A  1E02      00225         LD     E,2
534C  DD19      00226         ADD    IX, DE   
534E  FD216954  00227         LD     IY, XS
5352  1600      00228         LD     D,0
5354  58        00229         LD     E,B
5355  FD19      00230         ADD    IY, DE  
5357  DD7E00    00231         LD     A,(IX)
535A  FD4E00    00232         LD     C,(IY)
535D  81        00233         ADD    A,C      
535E  FE80      00234         CP     128
5360  D26653    00235         JP     NC,TOBIG5
5363  C36853    00236         JP     OK5        
5366  D680      00237 TOBIG5: SUB    128 
5368  FD7700    00238 OK5:    LD     (IY),A
                00239        
536B  DD216D55  00240         LD     IX, YINCS
536F  1600      00241         LD     D,0
5371  1E02      00242         LD     E,2
5373  DD19      00243         ADD    IX, DE  
5375  FD21E954  00244         LD     IY, YS
5379  1600      00245         LD     D,0
537B  58        00246         LD     E,B
537C  FD19      00247         ADD    IY, DE   
537E  DD7E00    00248         LD     A,(IX)
5381  FD4E00    00249         LD     C,(IY)
5384  81        00250         ADD    A,C    
5385  FE30      00251         CP     48
5387  D28D53    00252         JP     NC,TOBIG6
538A  C38F53    00253         JP     OK6
538D  D630      00254 TOBIG6: SUB    48 
538F  FD7700    00255 OK6:    LD     (IY),A                      
5392  C3E653    00256         JP     JOIN
                00257 
                00258 ; ----------------------------------------------------------------
                00259 ; | This little nasty thing works around a limitation of the Z80 |
                00260 ; |                                                              |
                00261 ; | This is a hacky way to get from the bottom of the main loop  |
                00262 ; | back to the top of the main loop (maximum distance thing     |
                00263 ; ----------------------------------------------------------------
                00264 JB5:                     ; branch back to L5 (top of the main loop)
5395  C37452    00265         JP     L5
                00266 
                00267                          ; this block is the same as the above, just plane 4 (DE set to 3)        
5398  DD216955  00268 LS32:   LD     IX, XINCS
539C  1600      00269         LD     D,0
539E  1E03      00270         LD     E,3
53A0  DD19      00271         ADD    IX, DE   
53A2  FD216954  00272         LD     IY, XS
53A6  1600      00273         LD     D,0
53A8  58        00274         LD     E,B
53A9  FD19      00275         ADD    IY, DE   
53AB  DD7E00    00276         LD     A,(IX)
53AE  FD4E00    00277         LD     C,(IY)
53B1  81        00278         ADD    A,C      
53B2  FE80      00279         CP     128
53B4  D2BA53    00280         JP     NC,TOBIG7
53B7  C3BC53    00281         JP     OK7
53BA  D680      00282 TOBIG7: SUB    128 
53BC  FD7700    00283 OK7:    LD     (IY),A
                00284 
53BF  DD216D55  00285         LD     IX, YINCS
53C3  1600      00286         LD     D,0
53C5  1E03      00287         LD     E,3
53C7  DD19      00288         ADD    IX, DE   
53C9  FD21E954  00289         LD     IY, YS
53CD  1600      00290         LD     D,0
53CF  58        00291         LD     E,B
53D0  FD19      00292         ADD    IY, DE   
53D2  DD7E00    00293         LD     A,(IX)
53D5  FD4E00    00294         LD     C,(IY)
53D8  81        00295         ADD    A,C     
53D9  FE30      00296         CP     48
53DB  D2E153    00297         JP     NC,TOBIG8
53DE  C3E353    00298         JP     OK8
53E1  D630      00299 TOBIG8: SUB    48 
53E3  FD7700    00300 OK8:    LD     (IY),A        
                00301 
                00302 ;
                00303 ; ----------------------------------------------------------------
                00304 ; |  Draw pixel at XS[B] and YS[B]                               |
                00305 ; ----------------------------------------------------------------
                00306 JOIN:                    ; XS[B] and YS[B] have been updated, get ready to call SETGR to plot flake
53E6  DD216954  00307         LD     IX,XS
53EA  1600      00308         LD     D,0
53EC  58        00309         LD     E,B
53ED  DD19      00310         ADD    IX,DE
53EF  DD4E00    00311         LD     C,(IX)    ; C now contains the X position
                00312 
53F2  DD21E954  00313         LD     IX,YS
53F6  1600      00314         LD     D,0
53F8  58        00315         LD     E,B
53F9  DD19      00316         ADD    IX,DE
53FB  DD5600    00317         LD     D,(IX)    ; D now contains the Y position
                00318 
53FE  59        00319         LD     E,C       ; E = C (x position)
53FF  C5        00320         PUSH   BC        ; push BC so that B can be used in SETGR
5400  CD0954    00321         CALL SETGR       ; plot the pixel at (E,D)
5403  C1        00322         POP    BC        ; pop BC back so B contains main loop iterator
                00323 
5404  108F      00324         DJNZ   JB5       ; decrement B, if it's greater than zero, use the trampoline
                00325                          ; routine to bounce back to the top of the loop
                00326 
5406  C37252    00327         JP     MAIN      ; start over after plotting all 128 flakes        
                00328 
                00329         
                00330         
                00331 ; **********************************************************
                00332 ; *  Graphics routines                                     *
                00333 ; *  Set (E,D) before calling SETGR, UNSETGR, or TEST      *
                00334 ; *  X coordinate in E register                            *
                00335 ; *  Y coordinate in D register                            *
                00336 ; *  Note, all registers are destroyed by this routine     *
                00337 ; *  Make sure you PUSH and POP the registers before       *
                00338 ; *  invoking any of these routines                        *
                00339 ; **********************************************************
5409  3EC6      00340 SETGR   LD  A,0C6H
540B  1806      00341         JR  TEST10
540D  3E86      00342 UNSETGR LD  A,86H
540F  1802      00343         JR  TEST10
5411  3E46      00344 TEST    LD  A,46H
5413  324654    00345 TEST10  LD  (INST+1),A
5416  7A        00346 ADDRES  LD  A,D
5417  06FF      00347         LD  B,0FFH
5419  04        00348 LOOP    INC B
541A  D603      00349         SUB 3
541C  F21954    00350         JP  P,LOOP
541F  C603      00351         ADD A,3
5421  CB27      00352         SLA A
5423  4F        00353         LD  C,A
5424  68        00354         LD  L,B
5425  2600      00355         LD  H,0
5427  0606      00356         LD  B,6
5429  29        00357 LOOP1   ADD HL,HL
542A  10FD      00358         DJNZ LOOP1
542C  1600      00359         LD  D,0
542E  CB3B      00360         SRL E
5430  3001      00361         JR  NC,CONT
5432  0C        00362         INC C
5433  19        00363 CONT    ADD HL,DE
5434  11003C    00364         LD  DE,VIDEO
5437  19        00365         ADD HL,DE
5438  CB21      00366         SLA C
543A  CB21      00367         SLA C
543C  CB21      00368         SLA C
543E  3A4654    00369         LD  A,(INST+1)
5441  81        00370         ADD A,C
5442  324654    00371         LD  (INST+1),A
5445  CB        00372 INST    DEFB    0CBH
5446  00        00373         DEFB    0
5447  CBFE      00374         SET     7,(HL)
5449  C9        00375         RET
                00376 
                00377 
                00378 ; * generates a random number from 0 - 255 (best used as a seed value, because it's not
                00379 ; * especially random
544A  E5        00380 RANDSD   PUSH    HL
544B  ED5F      00381          LD      A,R
544D  6F        00382          LD      L,A
544E  E63F      00383          AND     63
5450  67        00384          LD      H,A
5451  7E        00385          LD      A,(HL)
5452  E1        00386          POP     HL
5453  327155    00387          LD      (seed),A
5456  C9        00388          RET
                00389 
                00390 ; * Generates pretty decent random number between 0 - 255, and as long as the seed routine has been called
5457  C5        00391 RANDR    PUSH   BC
5458  3A7155    00392          ld a, (seed)
545B  47        00393          ld b, a 
545C  0F        00394          rrca ; multiply by 32
545D  0F        00395          rrca
545E  0F        00396          rrca
545F  EE1F      00397          xor   1fH 
5461  80        00398          add a, b
5462  DEFF      00399          sbc a, 255 ; carry
5464  327155    00400          ld (seed), a
5467  C1        00401          POP    BC
5468  C9        00402          ret
                00403 
                00404 ; ###############################################################
                00405 ; # DATA SECTION                                                #
                00406 ; ###############################################################
5469            00407 XS       DS   128  ; 128 X locations
54E9            00408 YS       DS   128  ; 128 Y locations
5569            00409 XINCS    DS   4    ; 4 x increment values 
556D            00410 YINCS    DS   4    ; 4 y increment values 
5571            00411 SEED     DS   1    ; seed value for random numbers
                00412 
                00413         END


ADDRES          5416  CONT            5433  ENTRY           5200  
INST            5445  JB5             5395  JOIN            53E6  
L1              5216  L2              522A  L3              5251  
L4              5264  L5              5274  LOOP            5419  
LOOP1           5429  LS128           52A2  LS32            5398  
LS64            5344  LS96            52F3  MAIN            5272  
OK1             52C6  OK2             52ED  OK3             5317  
OK4             533E  OK5             5368  OK6             538F  
OK7             53BC  OK8             53E3  RANDR           5457  
RANDSD          544A  SEED            5571  SETGR           5409  
TEST            5411  TEST10          5413  TOBIG1          52C4  
TOBIG2          52EB  TOBIG3          5315  TOBIG4          533C  
TOBIG5          5366  TOBIG6          538D  TOBIG7          53BA  
TOBIG8          53E1  UNSETGR         540D  VIDEO           3C00  
XINCS           5569  XS              5469  YINCS           556D  
YS              54E9  
